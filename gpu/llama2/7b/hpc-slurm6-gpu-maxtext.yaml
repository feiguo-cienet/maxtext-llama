# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

blueprint_name: slurm6-gpu-maxtext

vars:
  project_id: ## Set GCP Project ID Here ##
  deployment_name: slurm6-gpu-maxtext
  region: us-central2
  zone: us-central2-b
  new_image_family: llama2-slurm-v6
  instance_image_custom: true
  disk_size_gb: 200

deployment_groups:
- group: primary
  modules:
  - id: network
    source: modules/network/vpc

  - id: script
    source: modules/scripts/startup-script
    settings:
      runners:
      - type: shell
        destination: gpu_setup.sh
        content: |
          #!/bin/bash
          mkdir -p /opt/apps/scripts/gpu-test
          chmod a+rwx /opt/apps/scripts/gpu-test

      - type: data
        destination: /opt/apps/scripts/gpu-test/run_maxtext.sh
        content: |
          #!/bin/bash
          # Update the following parameters in the python3 command in this script.
          # RUN_NAME: (required, see https://github.com/google/maxtext?tab=readme-ov-file#overview)
          # STORAGE_BUCKET: GCS bucket where dataset is stored. (i.e.: gs://dataset-gpu/dataset)
          # ATTENTION: (i.e. dot_product, flash)
          # STEPS: steps to run (i.e. 100, 1000)

          #SBATCH --nodes=1
          #SBATCH --ntasks-per-node=1
          #SBATCH --mem=50000
          #SBATCH --partition=g2gpu2

          set -e -o pipefail

          # Start virtual environment.
          virtualenv venv
          source venv/local/bin/activate

          # Clone maxtext repository, lock version of maxtext and
          # install dependencies.
          git clone https://github.com/AI-Hypercomputer/maxtext
          cd maxtext/
          # git reset --hard 39a3f19e832016741be803ef5253333e2f434cb8
          bash setup.sh

          idx=$(date +%Y-%m-%d-%H-%M)

          # Non-Googlers please remember to point `BASE_OUTPUT_DIRECTORY` to a GCS bucket that you own, this bucket will store all the files generated by MaxText during a run
          export BASE_OUTPUT_DIRECTORY=gs://cienet-maxtext-llama-logger
          export ASYNC_CHECKPOINTING=false

          # We install torch CPU because the checkpoint conversion script MaxText/llama_or_mistral_ckpt.py does not need a TPU/GPU
          pip install torch --index-url https://download.pytorch.org/whl/cpu

          # We define a var for the path to the Meta checkpoint. Non-Googlers please remember to update the source `META_CHECKPOINT_PATH` to the GCS bucket where you have your Meta checkpoint
          export META_CHECKPOINT_PATH=gs://cienet-maxtext-llama/llama2-7b/meta-ckpt

          # In the following command, we are copying Meta's checkpoint into a local directory `tmp`.
          # You can use a different local directory than /tmp/, if you do so, please use the same local path for `base-model-path` when running `python3 MaxText/llama_or_mistral_ckpt.py`
          gcloud storage cp -r ${META_CHECKPOINT_PATH} /tmp/

          # `CONVERTED_CHECKPOINT_PATH` is the path to the GCS bucket where we want to save our converted (Orbax) checkpoint. Non-Googlers please remember to point `CONVERTED_CHECKPOINT_PATH` to a GCS bucket that you own
          export CONVERTED_CHECKPOINT_PATH=gs://cienet-maxtext-llama/test/${idx}/decode-ckpt-maxtext-gpu

          #Next, run the conversion script `MaxText/llama_or_mistral_ckpt.py` to convert Meta's PyTorch checkpoint in `base-model-path` and save the new converted (Orbax) checkpoint in the `maxtext-model-path`
          python3 MaxText/llama_or_mistral_ckpt.py --base-model-path /tmp/meta-ckpt --model-size llama2-7b --maxtext-model-path ${CONVERTED_CHECKPOINT_PATH}

          # We define `CONVERTED_CHECKPOINT` to refer to the checkpoint subdirectory exactly inside `CONVERTED_CHECKPOINT_PATH`. This way it is easier to use this path in the `train.py` and `decode.py` commands
          export CONVERTED_CHECKPOINT=${CONVERTED_CHECKPOINT_PATH}/0/items

          # Note that the `CONVERTED_CHECKPOINT` is in a `scanned` format which is great for training but for efficient decoding performance we want the checkpoint in an `unscanned` format.
          # We can do this by running `MaxText/generate_param_only_checkpoint.py` on `CONVERTED_CHECKPOINT` with `force_unroll=true`.
          export DIRECT_PARAMETER_CHECKPOINT_RUN=direct_generate_param_only_checkpoint_${idx}
          python3 MaxText/generate_param_only_checkpoint.py MaxText/configs/base.yml base_output_directory=${BASE_OUTPUT_DIRECTORY} load_parameters_path=${CONVERTED_CHECKPOINT} run_name=${DIRECT_PARAMETER_CHECKPOINT_RUN} model_name='llama2-7b' hardware=gpu async_checkpointing=${ASYNC_CHECKPOINTING}

          export RUN_NAME="llama-2-1vm-$(date +%Y-%m-%d-%H-%M)"

          # # Set environment variables
          # for ARGUMENT in "$@"; do
          #     IFS='=' read -r KEY VALUE <<< "$ARGUMENT"
          #     export "$KEY"="$VALUE"
          # done

          export XLA_FLAGS="--xla_dump_to=$BASE_OUTPUT_PATH/$RUN_NAME/HLO_dumps/
          --xla_gpu_enable_latency_hiding_scheduler=true --xla_gpu_enable_triton_gemm=false
          --xla_gpu_graph_level=0 --xla_gpu_enable_highest_priority_async_stream=true
          --xla_gpu_all_reduce_combine_threshold_bytes=134217728 --xla_gpu_all_gather_combine_threshold_bytes=134217728
          --xla_gpu_reduce_scatter_combine_threshold_bytes=67108864 --xla_gpu_enable_pipelined_all_gather=true
          --xla_gpu_enable_pipelined_reduce_scatter=true --xla_gpu_enable_pipelined_all_reduce=true
          --xla_gpu_enable_while_loop_double_buffering=true --xla_gpu_enable_triton_softmax_fusion=false
          --xla_gpu_enable_all_gather_combine_by_dim=false --xla_gpu_enable_reduce_scatter_combine_by_dim=false
          --xla_disable_hlo_passes=rematerialization"

          # python MaxText/train.py MaxText/configs/base.yml run_name=$RUN_NAME hardware=gpu steps=30 dcn_data_parallelism=1 ici_fsdp_parallelism=8 per_device_batch_size=4 max_target_length=4096 model_name=llama2-7b enable_checkpointing=true attention=cudnn_flash_te remat_policy=minimal_flash use_iota_embed=true scan_layers=false dataset_type=synthetic async_checkpointing=${ASYNC_CHECKPOINTING} base_output_directory=$BASE_OUTPUT_DIRECTORY
          python3 MaxText/train.py MaxText/configs/base.yml run_name=$RUN_NAME hardware=gpu steps=30 max_target_length=4096 model_name=llama2-7b enable_checkpointing=true attention=cudnn_flash_te remat_policy=minimal_flash use_iota_embed=true scan_layers=false dataset_type=synthetic async_checkpointing=${ASYNC_CHECKPOINTING} base_output_directory=$BASE_OUTPUT_DIRECTORY

          # Run maxtext benchmark test.
          # (i.e.) python3 MaxText/train.py MaxText/configs/base.yml run_name=1xv4-128 base_output_directory=${PWD}/output/ dataset_path=gs://dataset_tpu/dataset async_checkpointing=False attention=dot_product steps=100
          # python3 MaxText/train.py MaxText/configs/base.yml run_name=<RUN_NAME> base_output_directory=${PWD}/output/ dataset_path=<STORAGE_BUCKET> async_checkpointing=False attention=<ATTENTION> steps=<STEPS>

  - id: g2_nodeset
    source: community/modules/compute/schedmd-slurm-gcp-v6-nodeset
    use: [network1]
    settings:
      node_count_dynamic_max: 1
      bandwidth_tier: gvnic_enabled
      disk_size_gb: $(vars.disk_size_gb)
      enable_public_ips: true
      enable_smt: true
      machine_type: g2-standard-96
      on_host_maintenance: TERMINATE
      instance_image:
        family: $(vars.new_image_family)
        project: $(vars.project_id)

  - id: g2_partition
    source: community/modules/compute/schedmd-slurm-gcp-v6-partition
    use: [g2_nodeset]
    settings:
      partition_name: g2gpu2
      is_default: false

  - id: compute_nodeset
    source: community/modules/compute/schedmd-slurm-gcp-v6-nodeset
    use: [network]
    settings:
      name: ns2
      node_count_dynamic_max: 20
      bandwidth_tier: gvnic_enabled
      allow_automatic_updates: false

  - id: compute_partition
    source: community/modules/compute/schedmd-slurm-gcp-v6-partition
    use: [compute_nodeset]
    settings:
      partition_name: compute
      is_default: true

  - id: slurm_login
    source: community/modules/scheduler/schedmd-slurm-gcp-v6-login
    use: [network]
    settings:
      enable_login_public_ips: true
      machine_type: n2-standard-16

  - id: slurm_controller
    source: community/modules/scheduler/schedmd-slurm-gcp-v6-controller
    use:
    - g2_partition
    - compute_partition
    - slurm_login
    - network
    settings:
      enable_controller_public_ips: true
      machine_type: n2-standard-16
      login_startup_script: $(script.startup_script)
